meta {
  name: 02 - Send reporter message - 2 - Text
  type: http
  seq: 2
}

post {
  url: {{BASE_URL}}/engine/events/user-message
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "TenantId": "{{TENANT_ID}}",
    "SchemaId": "{{MAIN_SCHEMA_ID}}",
    "EventType": "UserMessage",
    "EventTimestamp": "{{TIMESTAMP}}",
    "UserMessage": {
      "Phone": "+91-9123456789",
      "EventTimestamp": "{{TIMESTAMP}}",
      "MessageType": "Text",
      "MessageChannel": "Telegram",
      "TextMessage": "Emergency ...."
    }
  }
}

script:pre-request {
  const nowStr = new Date().toISOString();
  bru.setEnvVar("TIMESTAMP", nowStr);
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("USER_MESSAGE_EVENT_2_ID", res.body.Data.id);
  }
  
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("RULE_ID", jsonRes.Data.id);
      bru.setEnvVar("ROOT_CONDITION_ID", jsonRes.Data.Condition.id);
      bru.setEnvVar("RULE_ACTION_ID", jsonRes.Data.Action.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
