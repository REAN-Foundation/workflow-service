meta {
  name: 01 - Create question node - QN1
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/nodes/question-node
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "QN1-Closing question",
    "Description": "This question node asks the reporter question with options enquiring about satisfactory conclusion of the incident handling.",
    "Type": "QuestionNode",
    "ParentNodeId": "{{EXECUTION_NODE_2_ID}}",
    "SchemaId": "{{SCHEMA_ID}}",
    "Actions": [],
    "DelaySeconds": 180,
    "QuestionText": "I Hope everything is under control now. Please let us know whether you want to mark the incident handled or give additional information.",
    "ResponseType": "Single Choice Selection",
    "Options": [
      {
        "Text": "Mark incident as handled and closed",
        "Sequence": 1,
        "Metadata": [
          {
            "Key": "ButtonId",
            "Value": "button-id-1"
          }
        ]
      },
      {
        "Text": "Keep giving additional information",
        "Sequence": 2,
        "Metadata": [
          {
            "Key": "ButtonId",
            "Value": "button-id-2"
          }
        ]
      }
    ]
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("QUESTION_NODE_1_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Question node 1 is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
