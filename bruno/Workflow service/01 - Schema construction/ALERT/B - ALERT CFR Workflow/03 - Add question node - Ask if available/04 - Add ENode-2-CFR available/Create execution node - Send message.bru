meta {
  name: Create execution node - Send message
  type: http
  seq: 2
}

post {
  url: {{BASE_URL}}/engine/nodes
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "Send Thanks Messages to CFR",
    "Description": "This execution node holds actions to send location message to the CFR near the location.",
    "Type": "ExecutionNode",
    "ParentNodeId": "{{CFR_QUESTION_1_ID}}",
    "SchemaId": "{{CHILD_SCHEMA_ID}}",
    "Actions": [
      {
        "Type": "SendMessage",
        "Name": "Send message - To CFR",
        "Description": "Sending message - Thanks for the support!",
        "Sequence": 0,
        "Input": {
          "Params": [
            {
              "Type": "Phone",
              "Value": null,
              "Source": "Almanac",
              "Key": "ContextParams:CFR:Phone"
            },
            {
              "Type": "Text",
              "Name": "Thanks for the support message",
              "Value": "Thanks for the support! We appreciate your help."
            }
          ]
        }
      },
      {
        "Name": "Construct Primary Responder object",
        "Type": "ConstructObject",
        "Description": "Construct an object reprsenting primary responder",
        "Sequence": 1,
        "Input": {
          "Params": [
            {
              "Type": "Phone",
              "Value": null,
              "Source": "Almanac",
              "Key": "ContextParams:CFR:Phone"
            },
            {
              "Type": "DateTime",
              "Name": "Timestamp",
              "SubType": "Timestamp",
              "Key": "ResponseTimestamp",
              "Value": null
            }
          ]
        },
        "Output": {
          "Params": [
            {
              "Type": "Object",
              "Key": "ResponderInfo",
              "Destination": "Almanac",
              "ObjectParamTypes": [
                {
                  "Name": "Phone",
                  "Type": "Phone",
                  "Value": null
                },
                {
                  "Name": "ResponseTimestamp",
                  "Type": "DateTime",
                  "Value": null
                }
              ]
            }
          ]
        }
      },
      {
        "Type": "StoreToAlmanac",
        "Name": "Store input data to almanac of the parent schema instance",
        "Description": "Store the CFR phone number in parent schema instance almanac",
        "Sequence": 2,
        "Input": {
          "Params": [
            {
              "Name": "Responder details",
              "Type": "Object",
              "Source": "Almanac",
              "Key": "ResponderInfo",
              "Value": null,
              "ObjectParamTypes": [
                {
                  "Name": "Phone",
                  "Type": "Phone",
                  "Value": null
                },
                {
                  "Name": "ResponseTimestamp",
                  "Type": "DateTime",
                  "Value": null
                }
              ]
            },
            {
              "Type": "SchemaInstanceId",
              "Value": null,
              "Source": "Almanac",
              "Key": "ParentSchemaInstanceId"
            }
          ]
        },
        "Output": {
          "Params": [
            {
              "Destination": "ParentSchemaInstanceAlmanac",
              "Key": "CFR:Responders",
              "Type": "Array"
            }
          ]
        }
      }
    ]
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("CFR_EN2_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Execution node is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
