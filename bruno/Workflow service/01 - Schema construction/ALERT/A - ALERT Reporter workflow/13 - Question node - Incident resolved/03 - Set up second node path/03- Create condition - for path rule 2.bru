meta {
  name: 03- Create condition - for path rule 2
  type: http
  seq: 3
}

post {
  url: {{BASE_URL}}/engine/conditions
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "Base rule condition for option 2",
    "Description": "This is the base rule condition for the second option. Keep providing information.",
    "ParentRuleId": "{{QN_NODE_PATH_2_RULE_ID}}",
    "ParentConditionId": null,
    "OperatorType": "Logical",
    "LogicalOperatorType": "Equal",
    "FirstOperand": {
      "DataType": "Integer",
      "Name": "Expected option sequence",
      "Value": 2
    },
    "SecondOperand": {
      "DataType": "Integer",
      "Name": "Chosen option sequence",
      "Value": null,
      "Source": "UserEvent",
      "Key": "QuestionResponse:ChosenOptionSequence"
    }
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("QN_NODE_PATH_2_RULE_CONDITION_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Question node second path condition is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
