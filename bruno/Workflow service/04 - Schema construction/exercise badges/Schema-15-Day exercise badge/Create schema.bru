meta {
  name: Create schema
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/schema
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
      "ClientId": "{{CLIENT_ID}}",
      "Name": "Exercise 15-Day Badge",
      "Description": "This schema represents a badge award logic when a patient does physical activity(exercise) for 15 consecutive days. The patient can keep accumulating these badges.",
      "Type": "Reuse-Existing-Instance",
      "EventTypeIds": [
          "{{EXERCISE_EVENT_TYPE_ID}}"
      ],
      "RootNode": {
          "Type": "Execution-Node",
          "Name": "Extract exercise data",
          "Description": "Extract exercise data",
          "Action": {
              "ActionType": "Extract-Data",
              "Name": "Extract exercise data",
              "InputParams": {
                  "RecordType": "Exercise",
                  "SourceType": "Database",
                  "Filters": [
                      {
                          "Key": "SamplingMethod",
                          "Value": "Any"
                      }
                  ]
              },
              "OutputParams": {
                  "Message": "Extracting exercise data for the given context.",
                  "OutputTag": "Extract-Data:Exercise",
                  "DestinationType": "Almanac"
              }
          }
      }
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("SCHEMA_ID", jsonRes.Data.id);
      bru.setEnvVar("SCHEMA_ROOT_NODE_ID", jsonRes.Data.RootNode.id);
      bru.setEnvVar("NODE_01_ID", jsonRes.Data.RootNode.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Schema is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Client');
      expect(jsonRes.Data.Client).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
      expect(jsonRes.Data).to.have.property('ValidFrom');
      expect(jsonRes.Data).to.have.property('RootNode');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
