meta {
  name: 05 - Create next node - Store updated badges
  type: http
  seq: 8
}

post {
  url: {{BASE_URL}}/engine/nodes
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
      "ParentNodeId": "{{NODE_04_ID}}",
      "SchemaId": "{{SCHEMA_ID}}",
      "Name": "Store updated badges",
      "Description": "Store updated 15-day exercise physical activity badges for the participant.",
      "Type": "Execution-Node",
      "Action": {
          "ActionType": "Store-Data",
          "Name": "Store updated badges",
          "Description": "Store updated 15-day exercise physical activity badges for the participant.",
          "InputParams": {
              "RecordType": "Badge",
              "SourceType": "Almanac",
              "InputTag": "Compare-Data:Badge",
              "StorageKeys": [
                  {
                      "Key": "BadgeCategory",
                      "Value": "Exercise"
                  },
                  {
                      "Key": "BadgeTitle",
                      "Value": "15-Day Physical Activity"
                  },
                  {
                      "Key": "BadgeId",
                      "Value": "{{BADGE_ID}}"
                  }
              ]
          },
          "OutputParams": {
              "Message": "Extracting 15-day exercise physical activity badges",
              "OutputTag": "Store-Data:Badge",
              "DestinationType": "Database"
          }
      }
  }
}

tests {
  try {
      var jsonRes = res.getBody();
      bru.setEnvVar("NODE_05_ID", jsonRes.Data.id);
  }
  catch (error) {
      console.log(error.message);
  }
  
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Node is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
      expect(jsonRes.Data).to.have.property('ParentNode');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
