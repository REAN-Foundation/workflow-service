meta {
  name: 01 - Create yes-no node - store info or exit
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/nodes/yes-no-node
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "Yes-No node to check keywords for workflow termination",
    "Description": "This decision (Yes/No) node basically checks whether the reporter has sent message contianing words - stop, done, thank you, thanks,... etc. If message contains these words, it triggers 'Yes' action which is to proceed ahead to terminate the workflow, else keep storing the information sent by user in the almanac.",
    "Type": "LogicalYesNoActionNode",
    "ParentNodeId": "{{QUESTION_NODE_1_ID}}",
    "SchemaId": "{{MAIN_SCHEMA_ID}}",
    "NoAction": {
      "Type": "StoreToAlmanac",
      "Name": "Store the message content to the almanac",
      "IsPathAction": true,
      "Input": {
        "Params": [
          {
            "Name": "Message content",
            "Type": "Text",
            "Value": null,
            "Source": "UserEvent",
            "Key": "TextMessage"
          },
          {
            "Name": "Message content",
            "Type": "Location",
            "Value": null,
            "Source": "UserEvent",
            "Key": "Location"
          }
        ]
      }
    },
    "YesAction": {
      "Type": "Exit",
      "Name": "Exit the workflow.",
      "IsPathAction": true,
      "Description": "This will terminate the workflow.",
      "Input": null
    }
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("TERMINATION_MESSAGE_YES_NO_NODE_ID", res.body.Data.id);
  }

}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });

  test("Termination Yes-No node is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      expect(jsonRes.Data).to.have.property('Name');
      expect(jsonRes.Data).to.have.property('Description');
  });

}

docs {
  User login with username/phone/email and password.

  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
