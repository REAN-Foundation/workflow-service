meta {
  name: 01 - Create CFR resp timer node
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/nodes/conditional-timer-node
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "T1-CFR Yes Response Checking Timer node",
    "Description": "This node when triggered checks in almanac whether any CFR has responded YES. This is checked at certain intervals for finite number of times.",
    "Type": "ConditionalTimerNode",
    "ParentNodeId": "{{MAIN_EN2_ID}}",
    "SchemaId": "{{MAIN_SCHEMA_ID}}",
    "NumberOfTries": 1,
    "DelaySeconds": 300,
    "NextNodeIdOnSuccess": null,
    "NextNodeIdOnTimeout": null
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("MAIN_TN1_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Schema is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
