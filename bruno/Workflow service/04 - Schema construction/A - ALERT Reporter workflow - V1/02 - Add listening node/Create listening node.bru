meta {
  name: Create listening node
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/nodes/listening-node
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "L1-Location Listener",
    "Description": "This node when triggered listens to user message events containing location information. Once the information is received, it stores in almanac and stops listening.",
    "Type": "ListeningNode",
    "ParentNodeId": null,
    "SchemaId": "{{SCHEMA_ID}}",
    "Input": {
      "Params": [
        {
          "Name": "Location",
          "Description": "This is the location where the emergency has occurred.",
          "Type": "Location",
          "Value": {
            "Longitude": null,
            "Latitude": null
          },
          "Key": "Emergency Location",
          "Required": true,
          "Source": "UserEvent"
        }
      ]
    },
    "Actions": [
      {
        "Type": "StoreToAlmanac",
        "Name": "Store input data to almanac",
        "Sequence": 1,
        "Input": {
          "Params": [
            {
              "Type": "Location",
              "Value": null,
              "Source": "UserEvent",
              "Key": "ContextParams:Location"
            }
          ]
        }
      },
      {
        "Type": "UpdateContextParams",
        "Name": "Update context params with the location data",
        "Sequence": 2,
        "Input": {
          "Params": [
            {
              "Type": "Location",
              "Value": null,
              "Source": "UserEvent",
              "Key": "ContextParams:Location"
            }
          ]
        }
      }
    ]
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("LOCATION_LISTENING_NODE_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Schema is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
      // expect(jsonRes.Data).to.have.property('Name');
      // expect(jsonRes.Data).to.have.property('Description');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
