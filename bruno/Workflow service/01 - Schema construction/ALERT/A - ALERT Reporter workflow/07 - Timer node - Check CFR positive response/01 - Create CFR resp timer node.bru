meta {
  name: 01 - Create CFR resp timer node
  type: http
  seq: 1
}

post {
  url: {{BASE_URL}}/engine/nodes/timer-node
  body: json
  auth: none
}

headers {
  Content-Type: application/json
  x-api-key: {{API_KEY}}
  Authorization: Bearer {{MODERATOR_USER_JWT}}
}

body:json {
  {
    "Name": "T1-CFR Yes Response Checking Timer node",
    "Description": "This node when triggered checks in almanac whether any CFR has responded YES. This is checked at certain intervals for finite number of times.",
    "Type": "TimerNode",
    "ParentNodeId": "{{EXECUTION_NODE_2_ID}}",
    "SchemaId": "{{SCHEMA_ID}}",
    "NumberOfTries": 1,
    "TimerSeconds": 90,
    "Input": {
      "Params": [
        {
          "Name": "List of CFRs",
          "Description": "List of CFRs who have responded YES containing phone-numbers, name and whether the CFR is primary.",
          "Type": "Object",
          "Value": null,
          "Key": "CFR:Responders",
          "Required": true,
          "Source": "Almanac"
        }
      ]
    },
    "PassAction": {
      "Type": "SendMultipleMessagesToOneUser",
      "Name": "Send reporter ambulance numbers and locations",
      "IsPathAction": true,
      "Input": {
        "Params": [
          {
            "Name": "Reporter Phonenumber",
            "Type": "Phonenumber",
            "Value": null,
            "Source": "Almanac",
            "Key": "ContextParams:Reporter:Phonenumber"
          },
          {
            "Name": "Responded CFR Details",
            "Type": "Array",
            "Source": "Almanac",
            "SubElementType": "Object",
            "Key": "CFR:Responders",
            "Value": null,
            "ArrayObjectTypes": [
              {
                "Name": "Name",
                "Type": "String",
                "Value": null
              },
              {
                "Name": "Phonenumber",
                "Type": "Phonenumber",
                "Value": null
              },
              {
                "Name": "Location",
                "Type": "Location",
                "Value": null
              },
              {
                "Name": "Address",
                "Type": "String",
                "Value": null
              },
              {
                "Name": "IsPrimaryContact",
                "Type": "Boolean",
                "Value": null
              }
            ]
          }
        ]
      }
    },
    "TimeoutAction": {
      "Type": "SendMultipleMessagesToOneUser",
      "Name": "Send reporter ambulance numbers and locations",
      "IsPathAction": true,
      "Input": {
        "Params": [
          {
            "Name": "Reporter Phonenumber",
            "Type": "Phonenumber",
            "Value": null,
            "Source": "Almanac",
            "Key": "ContextParams:Reporter:Phonenumber"
          },
          {
            "Name": "Nearby Ambulance Details",
            "Type": "Array",
            "Source": "Almanac",
            "SubElementType": "Object",
            "Key": "Ambulances",
            "Value": null,
            "ArrayObjectTypes": [
              {
                "Name": "Name",
                "Type": "String",
                "Value": null
              },
              {
                "Name": "Phonenumber",
                "Type": "Phonenumber",
                "Value": null
              },
              {
                "Name": "Location",
                "Type": "Location",
                "Value": null
              },
              {
                "Name": "Address",
                "Type": "String",
                "Value": null
              }
            ]
          }
        ]
      }
    }
  }
}

script:post-response {
  let status = res.getStatus();
  console.log(status)
  if (status == 201) {
    bru.setEnvVar("CFR_RESPONSE_TIMER_NODE_ID", res.body.Data.id);
  }
  
}

tests {
  test("Request is successfull", function () {
      expect(res.getStatus()).to.equal(201);
      var jsonRes = res.getBody();
      expect(jsonRes.Status).to.eql('success');
  });
  
  test("Schema is created", function () {
      var jsonRes = res.getBody();
      expect(jsonRes.Data).to.have.property('id');
  });
  
}

docs {
  User login with username/phone/email and password.
  
  'LoginRoleId' is the role id through which user wants to log into the system provided the user has the role.
}
